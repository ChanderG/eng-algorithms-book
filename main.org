#+TITLE: Engineering Algorithms
#+SETUPFILE: theme/theme-readtheorg.setup
#+OPTIONS: H:3
** About
   This book or more specifically guide is focussed on an *enginneering* approach to
   basic algorithms and data structures.

   I leave the /Science/ to the more eshtablished books, focussing on the /Engineering/ 
   aspects instead.

   The way this book would work is by offloading the teaching aspects to other works, giving
   pointers at every stage. We guide the user to try out these algorithms in a practical way.
   The standard techniques in usual CS courses is to list the psuedo codes and leave it at 
   that.

   We would like to bring in testing, modularity, scalability and comparision of the
   performance on real world ish data and inputs.

   We encourage engineering algorithms in 2 different languages: one high level and one 
   low level.
   We will assume Python and C/C++ without loss of generality.

   This way the reader can get an appreciation of the differences in the levels of the
   language.
*** Organization
    Each section has 3 subsections:
    + Goal ::
	     The lesson goals/aims
    + Reading ::
		Reading recommendations left to the reader. This is the *Science* part.
		These are typically links, sections from the linked resources.
		There are 2 paragraphs in this subsection. The first is the primary 
		recommendation (meaning required/important), the second is auxiallary
		reading material.
    + Doing ::
	      This is the *Engineering* part. Ideas/tasks, sometimes broad, sometimes 
	      specific are listed here. It is recommended that the reader does these
	      fully.

	      Sometimes, examples (related to or partial solutions to the tasks) are 
	      mentioned here.

*** Resources
    One off resources are linked inline.
    Important/recurring resources are listed [[file:resources.org][here]].
-----
*** Prerequisites
    You need to be using a Linux distro.
    Basic familiarity with C, C++, Python.

    Someone who has done a first level programming course would be at the ideal level.

** Introduction: Order Notation
*** Order Notation
**** Goals
     + To understand the Order notation.
     + To setup a framework for timing implementations and comparing them.
**** Reading
     Read the corresponding chapter R2(most ideal introduction).

     Go through the wiki page: https://en.wikipedia.org/wiki/Big_O_notation.
     Look at the corresponding sections in R1 ( math heavy ).

     Search terms: time complexity, asymptotic notation, growth rates etc.
**** Doing
     Learn to time programs. We can look at 2 approaches.
     - *Langauge Agnostic* ::
        The unix command ~time~ can be used to time commands externally.
     - *Language Specific* ::
        Some languages have easy to use in-built timing functions. 
        For example, python has it's ~timeit~ module. Look at: 
        https://docs.python.org/2/library/timeit.html

    Now try some simple tests of timing.
    + Compare time taken between 2 different orders (like O(n^2) and O(n^3))
      You can use nested for loops with some dummy operation inside.
    + Try varying n and see effect.
    + Try varying the operation inside and see the effect.

    Look at E2.1
-----
*** Basic structures: Arrays and Lists
**** Goals
     + Understanding arrays and lists
     + Understand the differences between them
     + Looking at the standard implementations

**** Reading
     Read the corresponding section (at the start of the chapter on Data Structures) in R2.

     Read the wikipedia article: https://en.wikipedia.org/wiki/Array_data_structure
     A SO answer on the differences:
     http://stackoverflow.com/questions/166884/array-versus-linked-list

     Search terms: arrays, linked lists, lists

**** Doing
     Implementing from scratch and using in-built implementations.

     Do:
     + Investigate arrays in C/C++
     + Create linked lists in C (using node and pointer structure)
     + Investigate lists in Python

     By "investigate", I mean implement examples, find out time complexity for 
     common operations (inserting new elements, deleting elements, updating 
     reading, copying ), time performance between the different versions.

     Now look at the in-built implementations in C++. These are part of the
     STL (Standard Template Library) that comes bundled with C++.

     + Investigate ~vector~ in C++
     + Investigate ~list~ in C++

     For this look up corresponding pages in R3.
     These 2 are the important ones; you will be using them again and again.
     Also look at: ~array~, ~forward_list~ and the other containers from STL,
     though these are not as widely used.
-----
*** Basic structures: Dict
**** Goals
     + Understand a dict/map
     + Role of a Dict in Python
**** Reading
     This is a data structure covered very little in standard approaches.
     They touch upon the concept as Hash Tables, but it is used in few algorithms.

     https://en.wikipedia.org/wiki/Associative_array

     Look at the relevent sections in R2, R1.

     Search terms: associative arrays, dict, dictionary, maps, hash tables
**** Doing
     Now this is kind of langauge specfic.

     We have ~map~, ~unordered_map~ in C++ as a part of the STL. 
     + Investigate these. Use R3 as required.
     These are not widely used, but knowing them will be helpful.

     In Python, we have ~dict~ which is a completely different story. 
     It is one of the most used (even /overused/) features in general.
     + Investigate this.
     You will be frequently using ~dict~s as long as you use Python.
-----
** Searching
   This may seem simple/trivial, but we will use this to learn some practical aspects: 
   namely data IO in Python/C++ and templates in C++. Both these concepts will be 
   useful as we move to more important algorithms.
*** Goals
    + Understand linear and binary search.
    + See the effects on medium to large data.
*** Reading
    This is quite a simple topic.

    See the wikipedia articles on the 2 terms.
    http://stackoverflow.com/questions/700241/what-is-the-difference-between-linear-search-and-binary-search

    Read the relevent section in R2.
*** Doing
    Linear search is straight-forward. Binary search requires that your sort
    your data first.
    
    Consult R3 first before using a search engine blindly for C++ functions.

    For these, use int/float as your data type. Make up entries of small size: 5-15 elements. 
    + Implement simple linear search in C++. Try it using C style arrays or/and ~vector~.
    + Implement binary search in C++. Use ~vector~ and STL ~sort~ present in ~<algorithm>~.
    + Implement both in Python, using lists and ~sort~.
    + Compare performance between the C++/Python versions.
    + Check corner cases in your implementations: empty array/list, item not present etc.

    Looking at inbuilt functions.
    + Investigate ~binary_search~ in C++ STL ~<algorithm>~.

    Now for the practical angle.

    To really understand the differences (for this and future algorithms), we need
    bigger and more realistic data.
**** In Python, try to build a lookup for installed modules
	 Python modules are installed in your system at ~/usr/lib/python2.7/~.
	 A command like: ~ls -1 /usr/lib/python2.7/*.py~ will get you all the modules.
	 A check on my system shows around 200 or so files. This is a perfect input set
	 for the search algorithms. Note that this data is already sorted for you.

	 Either run the command in the shell, output to a file and ~read~ it in. 
	 Or run the command as a ~subprocess~.

	 Check the timing difference between linear and binary search.

	 Note that in python, the code you wrote above for int/floats can be used as is
	 for strings. This is the concept of *dynamic typing*. C++, however is *static typed*
	 and we have to re-write the code for strings.
**** In Python, try to build a dictionary lookup
	 This is simillar to the previous task, but with more data.

	 Unix systems have an inbuilt dictionary (only listing of words) of English inbuilt.
	 Try: ~cat /usr/share/dict/words~. A quick look shows around 99,000 words.

	 Run the previous task on this input.
**** In C++, try the previous 2 tasks
	 Doing this in C++, offers the opportunity of learning some C++ concepts.

	 The first is C++ ~string~, different from the C strings. Get a clear understanding
	 of the differences and learn to use the C++ version.

	 Use, ~ifstream~ to read in the files. Running a process from within C++, involves 
	 considerably more work, either by using the ~system~ command or by ~fork~ and ~exec~,
	 and then using a ~pipe~ or some other /inter process communication/ technique, all 
	 more off-topic and not really recommended at this juncture.

	 Previously, you wrote the code for int/float. Now that is not directly transferable
	 to strings. You need to physically re-write everything for strings. This brings us
	 to the concept of ~templates~.

	 Templates are a very powerful C++ feature that most programming courses don't care
	 about. 
	 
	 Read: 
	 + http://www.programiz.com/cpp-programming/templates
	 + http://www.tenouk.com/Module24.html
	 + https://en.wikipedia.org/wiki/Template_(C%2B%2B)
	 + Look at example E3.1

	 Now try the previous 2 tasks.
-----
** Sorting
